plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'  //requires JDK11+
    id 'com.gluonhq.gluonfx-gradle-plugin' version '1.0.10'
    id 'eclipse'
    id 'org.beryx.jlink' version '2.24.4'
}

tasks.wrapper {
    gradleVersion = '7.3.2'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'de.sebastianstenzel'
version = '0.0.1-SNAPSHOT'
description = 'Sample JavaFX app using Dagger 2 for DI of controllers and services'

ext {
    mainClassName = 'daggerfx.CoffeeApp'
    launcherClassName = 'daggerfx.Launcher'
    moduleName = 'daggerfx' //name defined in module-info.java
    javafxVersion = '17.0.1'  //requires JDK11+
    daggerVersion = '2.40.5'
    currentPlatform = javafx.platform.classifier
}

eclipse {
    classpath {
        //include the sources generated by Dagger
        file.beforeMerged { cp ->
            cp.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/generated/sources/annotationProcessor/java/main", null))
        }
    }
}

repositories {
    mavenCentral()
    google()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

configurations {
    //define a configuration for other supported OS native libraries (apart from the current OS)
    otherOSnatives
}

dependencies {
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation("com.google.dagger:dagger:$daggerVersion") {
        //exclude the original non-modular javax.inject
        exclude group: 'javax.inject', module: 'javax.inject'
    }
    //javax.inject modular replacement
    implementation 'com.guicedee.services:javax.inject:1.0.20.2'

    ['linux', 'mac', 'win'].each { classifier ->
        if (classifier != currentPlatform) {
            otherOSnatives "org.openjfx:javafx-base:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-controls:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-fxml:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-graphics:$javafxVersion:$classifier"
            otherOSnatives "org.openjfx:javafx-swing:$javafxVersion:$classifier"
        }
    }
}

sourceSets {
    main {
        resources {
            //include current platform's GraalVM native-image configuration files
            srcDir "src/graal-cfg/$currentPlatform"
        }
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'JavaFX-Version': javafxVersion,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
}

application {
    mainModule = project.moduleName
    mainClass = project.mainClassName
    executableDir = ''
}

//main distribution generated would be platform-specific to the current OS
//hence the distribution's name should reflect that
distributions.main.distributionBaseName = project.name + '-' + currentPlatform

run {
    //use the following jvmArgs for as many different run scenarios as possible,
    //and for all the code-execution paths as much as possible,
    //to generate (or merge with) the GraalVM native-image configuration files
    //in the src/graal-cfg/<currentPlatform>/META-INF/native-image directory.
    //This directory is used by GraalVM during the native-image build.

    //jvmArgs = ["-agentlib:native-image-agent=config-merge-dir=src/graal-cfg/$currentPlatform/META-INF/native-image"]

    debugOptions {
        enabled = false
        port = 5566
        server = true
        suspend = false
    }

}

//make an executable uber jar including all dependencies
//which should work in all supported OS'es (Windows, Mac and Linux)
task uberJar(type: Jar) {
    with jar
    archiveClassifier = 'no-deps'
    manifest {
        attributes(
            'Main-Class': project.launcherClassName,
            'JavaFX-Version': javafxVersion,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'Automatic-Module-Name': project.group + '.' + project.moduleName,
        )
    }
    from {
        def allClasspaths = configurations.runtimeClasspath + configurations.otherOSnatives
        allClasspaths.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

gluonfx {
    compilerArgs = [
        '--allow-incomplete-classpath',
    ]
}

jlink {
    def jlinkImageName = "${project.moduleName}-${project.version}-$currentPlatform"
    imageDir = file("$buildDir/$jlinkImageName")
    imageZip = file("$buildDir/${project.distsDirName}/${jlinkImageName}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = project.moduleName
        noConsole = true  //applicable to Windows only
    }
    forceMerge 'javax.inject'
}

