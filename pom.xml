<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>de.sebastianstenzel</groupId>
    <artifactId>daggerfx</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>daggerfx</name> <!-- name of the resulting native executable -->
    <description>Sample JavaFX app using Dagger 2 for DI of controllers and services</description>

    <properties>
        <dagger.version>2.49</dagger.version>
        <javafx.version>21.0.1</javafx.version>
        <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>
        <gluonfx.maven.plugin.version>1.0.22</gluonfx.maven.plugin.version>
        <main.module>daggerfx</main.module> <!-- name defined in module-info.java -->
        <main.class>daggerfx.CoffeeApp</main.class>
        <launcher.class>daggerfx.Launcher</launcher.class>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- JavaFX -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!-- Dagger -->
        <dependency>
            <groupId>com.google.dagger</groupId>
            <artifactId>dagger</artifactId>
            <version>${dagger.version}</version>
            <exclusions>
                <!-- exclude the original non-modular javax.inject -->
                <exclusion>
                    <groupId>javax.inject</groupId>
                    <artifactId>javax.inject</artifactId>
                </exclusion>
            </exclusions> 
        </dependency>
        <!-- javax.inject modular replacement -->
        <dependency>
            <groupId>com.guicedee.services</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1.0.20.2</version>
        </dependency>
    </dependencies>

    <repositories>
        <repository>
            <id>google-maven</id>
            <name>Google Maven Repo</name>
            <url>https://maven.google.com</url>
        </repository>
    </repositories>
  
    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <!-- include the GraalVM native-image configuration files -->
            <resource>
                <directory>src/graal-cfg/${javafx.platform}</directory>
            </resource>
        </resources>
        <plugins>
            <!-- helper for Eclipse m2e plugin to be aware of the generated sources -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/annotations</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <release>11</release>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>com.google.dagger</groupId>
                            <artifactId>dagger-compiler</artifactId>
                            <version>${dagger.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <!-- create project's jar file in the target/modules folder
                 (to be used in the jlink image creation later) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <outputDirectory>${project.build.directory}/modules</outputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.4</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>no-deps-${javafx.platform}</shadedClassifierName>
                            <transformers>
                                <transformer
                                    implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>${launcher.class}</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
                <configuration>
                    <mainClass>${main.module}/${main.class}</mainClass>
                    <!-- options>
                        <option>-agentlib:native-image-agent=config-merge-dir=src/graal-cfg/${javafx.platform}/META-INF/native-image</option>
                    </options -->
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.gluonhq</groupId>
                <artifactId>gluonfx-maven-plugin</artifactId>
                <version>${gluonfx.maven.plugin.version}</version>
                <configuration>
                    <target>${client.target}</target>
                    <mainClass>${main.class}</mainClass>
                    <nativeImageArgs>
                        <arg>--add-exports=org.graalvm.nativeimage.builder/com.oracle.svm.core.jdk=ALL-UNNAMED</arg>
                        <arg>-H:+TraceNativeToolUsage</arg>
                    </nativeImageArgs>
                </configuration>
            </plugin>
            <!-- following plugins are used, at package phase, to produce a jlink image for the project:
                 1. copy all dependencies to the target/modules folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.2.0</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/modules</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <excludeTransitive>false</excludeTransitive>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 2. generate the jlink image for the daggerfx application -->
            <plugin>
                <groupId>org.moditect</groupId>
                <artifactId>moditect-maven-plugin</artifactId>
                <version>1.0.0.Final</version>
                <executions>
                    <!-- 2a. modularize the non-modular dagger library -->
                    <execution>
                        <id>add-module-infos</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>add-module-info</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/modules</outputDirectory>
                            <overwriteExistingFiles>true</overwriteExistingFiles>
                            <modules>
                                <module>
                                    <artifact>
                                        <groupId>com.google.dagger</groupId>
                                        <artifactId>dagger</artifactId>
                                        <version>${dagger.version}</version>
                                    </artifact>
                                    <moduleInfoSource>
                                        module dagger {
                                            requires transitive javax.inject;
                                            exports dagger;
                                            exports dagger.assisted;
                                            exports dagger.internal;
                                            exports dagger.multibindings;
                                        }
                                    </moduleInfoSource>
                                </module>
                            </modules>
                        </configuration>
                    </execution>
                    <!-- 2b. generate the jlink image from the target/modules folder -->
                    <execution>
                        <id>create-runtime-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>create-runtime-image</goal>
                        </goals>
                        <configuration>
                            <modulePath>
                                <path>${project.build.directory}/modules</path>
                            </modulePath>
                            <modules>
                                <module>${main.module}</module>
                            </modules>
                            <stripDebug>true</stripDebug>
                            <noManPages>true</noManPages>
                            <noHeaderFiles>true</noHeaderFiles>
                            <compression>2</compression>
                            <jarInclusionPolicy>NONE</jarInclusionPolicy>
                            <launcher>
                                <name>${main.module}</name>
                                <module>${main.module}/${main.class}</module>
                            </launcher>
                            <outputDirectory>${project.build.directory}/${main.module}-${project.version}-${javafx.platform}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>desktop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <client.target>host</client.target>
            </properties>
        </profile>
        <profile>
            <id>ios</id>
            <properties>
                <client.target>ios</client.target>
            </properties>
        </profile>
        <profile>
            <id>android</id>
            <properties>
                <client.target>android</client.target>
            </properties>
        </profile>
        <profile>
            <id>linux-amd64</id>
            <activation>
                <os>
                    <name>Linux</name>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>linux</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>linux-arm64</id>
            <activation>
                <os>
                    <family>Linux</family>
                    <arch>aarch64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>linux-aarch64</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>mac-amd64</id>
            <activation>
                <os>
                    <name>Mac</name>
                    <arch>x86_64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>mac</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>mac-arm64</id>
            <activation>
                <os>
                    <family>Mac</family>
                    <arch>aarch64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>mac-aarch64</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>windows-amd64</id>
            <activation>
                <os>
                    <family>Windows</family>
                    <arch>amd64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>win</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>windows-arm64</id>
            <activation>
                <os>
                    <family>Windows</family>
                    <arch>aarch64</arch>
                </os>
            </activation>
            <properties>
                <javafx.platform>win-aarch64</javafx.platform>
            </properties>
        </profile>
        <profile>
            <id>javafx.platform.custom</id>
            <activation>
                <property>
                    <name>javafx.platform</name>
                </property>
            </activation>
            <properties>
                <javafx.platform>${javafx.platform}</javafx.platform>
            </properties>
        </profile>
    </profiles>
</project>
